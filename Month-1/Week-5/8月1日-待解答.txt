在设计方案时必须做到：可灰度、可监控、可降级

技术方案常见的设计思考点：数据量级、QPS、数据一致性

跟其他人反馈问题，不仅要带着问题，也要带着解决方案。

即使对方是服务 owner 也不一定比你更懂出可能问题的点在哪。在一次性能优化的项目中，我们服务的某个下游耗时很严重。

初次沟通的结果是它们直接加资源。但是我们详细说明问题、挨个点问这里能不能优化，这个过程不断给他们同步更多信息帮助他们判断，最终发现配置中冗余了很多正则的规则、这部分规则完全可以下掉。

用到的每一个技术、工具都要研究透再用。虽然会多花时间，但是比功能评估偏差导致后期开发出现问题来的好，同时自己也能得到成长，总体来说是值得的。

提 Oncall 是个技术活儿

【开发中】 调用其他方接口时，要确定是否开启鉴权，最好让相应对接方来接入；

【开发中】 自己写完代码之后要先 diff 一下，然后再找一个同学帮忙一起看下，接下来再 CR，代码 QA 测试之后再 CR 一下，最后上线前再 diff 检查；

【开发中】 代码 CR 要尽量早，多 CR 几次，多找找问题；

【开发中】 对于 hsql，写一部分要测试一部分，别等到所有都写完之后再一起测试，否则最后测试时有问题不容易定位；

【测试中】 充分利用关键字检索日志、链路日志的功能，逐步排查问题

【测试中】 检查QA同学提出的测试case是否有补充；

【上线前】 需求中需要打标，那么在上线前要将PPE打的测试标给删除，然后再上线；